package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Cookies;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COOKIES.
*/
public class CookiesDao extends AbstractDao<Cookies, Long> {

    public static final String TABLENAME = "COOKIES";

    /**
     * Properties of entity Cookies.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Value = new Property(2, String.class, "value", false, "VALUE");
        public final static Property Expiration = new Property(3, long.class, "expiration", false, "EXPIRATION");
        public final static Property Domain = new Property(4, String.class, "domain", false, "DOMAIN");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Secure = new Property(6, int.class, "secure", false, "SECURE");
        public final static Property Http_secure = new Property(7, int.class, "http_secure", false, "HTTP_SECURE");
    };


    public CookiesDao(DaoConfig config) {
        super(config);
    }
    
    public CookiesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COOKIES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'VALUE' TEXT NOT NULL ," + // 2: value
                "'EXPIRATION' INTEGER NOT NULL ," + // 3: expiration
                "'DOMAIN' TEXT NOT NULL ," + // 4: domain
                "'PATH' TEXT NOT NULL ," + // 5: path
                "'SECURE' INTEGER NOT NULL ," + // 6: secure
                "'HTTP_SECURE' INTEGER NOT NULL );"); // 7: http_secure
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COOKIES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cookies entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getValue());
        stmt.bindLong(4, entity.getExpiration());
        stmt.bindString(5, entity.getDomain());
        stmt.bindString(6, entity.getPath());
        stmt.bindLong(7, entity.getSecure());
        stmt.bindLong(8, entity.getHttp_secure());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cookies readEntity(Cursor cursor, int offset) {
        Cookies entity = new Cookies( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // value
            cursor.getLong(offset + 3), // expiration
            cursor.getString(offset + 4), // domain
            cursor.getString(offset + 5), // path
            cursor.getInt(offset + 6), // secure
            cursor.getInt(offset + 7) // http_secure
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cookies entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setValue(cursor.getString(offset + 2));
        entity.setExpiration(cursor.getLong(offset + 3));
        entity.setDomain(cursor.getString(offset + 4));
        entity.setPath(cursor.getString(offset + 5));
        entity.setSecure(cursor.getInt(offset + 6));
        entity.setHttp_secure(cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cookies entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cookies entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
